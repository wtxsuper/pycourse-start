type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 49
    length: 45
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 36
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 151
    length: 39
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 92
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 247
    length: 37
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 148
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 341
    length: 35
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 204
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 433
    length: 36
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 260
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 522
    length: 44
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 316
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 622
    length: 42
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 372
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 721
    length: 38
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 428
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  text: |
    # Пример 1
    def task_1(a, d, c):
        # TODO
        return


    # Пример 2
    def task_2(a, d, c):
        # TODO
        return


    # Пример 3
    def task_3(a, d, c):
        # TODO
        return


    # Пример 4
    def task_4(a, d, c):
        # TODO
        return


    # Пример 5
    def task_5(a, d, c):
        # TODO
        return


    # Пример 6
    def task_6(a, d, c):
        # TODO
        return


    # Пример 7
    def task_7(a, d, c):
        # TODO
        return


    # Пример 8
    def task_8(a, d, c):
        # TODO
        return
  learner_created: false
- name: __init__.py
  visible: true
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest
    import math
    import task


    # todo: replace this with an actual test
    class TestCase(unittest.TestCase):
        def test_1(self):
            a, d, c = 3, 5, 7
            ans = (c - d / 5 + math.sqrt(321)) / (1 + a * 3)
            self.assertEqual(task.task_1(3, 5, 7), ans)

        def test_2(self):
            a,d,c = 2,4,6
            ans = (math.log10(c/3)-d+25)/(a*5-1)
            self.assertEqual(task.task_2(2, 4, 6), ans)

        def test_3(self):
            a,d,c = 9,8,7
            ans = (c/2+math.log(d)-35)/(a*5+1)
            self.assertEqual(task.task_3(9, 8, 7), ans)

        def test_4(self):
            a,d,c = 3,4,5
            ans = (math.tan(c)+d/32)/(a/3+1)
            self.assertEqual(task.task_4(3, 4, 5), ans)

        def test_5(self):
            a,d,c = 2,3,4
            ans = (c/5-d+1)/(c+math.tan(2*a))
            self.assertEqual(task.task_5(2, 3, 4), ans)

        def test_6(self):
            a,d,c = 5,6,3
            ans = (math.sqrt(25*c)+d-3)/(d-a*a+1)
            self.assertEqual(task.task_6(5, 6, 3), ans)

        def test_7(self):
            a,d,c = 6,7,8
            ans = (5*math.log10(c)+3*d-32)/(a*a+1)
            self.assertEqual(task.task_7(6, 7, 8), ans)

        def test_8(self):
            a,d,c = 2,9,5
            ans = (c*d-math.log(4*3*a))/(c+a-1)
            self.assertEqual(task.task_8(2, 9, 5), ans)
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 28 Feb 2023 14:50:53 UTC"
record: -1
