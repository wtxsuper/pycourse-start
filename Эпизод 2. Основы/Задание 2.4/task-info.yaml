type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 21
    length: 251
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 21
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 318
    length: 23
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 63
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 392
    length: 0
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 107
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 448
    length: 49
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 149
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  text: |
    def task_1(str):
        # TODO
        return


    def task_2(list):
        # TODO
        return


    def task_3(cities):
        # TODO
        return


    def task_4(a, b):
        # TODO
        return
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |-
    import unittest

    import task


    # todo: replace this with an actual test
    class TestCase(unittest.TestCase):
        def test_1(self):
            a = 'hello world1'
            d = {}
            for i in a:
                if i.isalpha():
                    if i.lower() in d:
                        d[i.lower()] += 1
                    else:
                        d[i.lower()] = 1

            self.assertEqual(task.task_1(a), d, msg="task_1")

        def test_2(self):
            a = [1, 4, 6, 7, 4, 8, 8]
            b = sum(set(a))

            self.assertEqual(task.task_2(a), b, msg="task_2")


        def test_3(self):
            cities = ['Moscow', 'Paris', 'Kiev', 'Minsk']

            str = ''
            for i in cities:
                str += i + ',' + ' '
            str =str[0:-2] + '.'


            self.assertEqual(task.task_3(cities), str, msg="task_3")

        def test_4(self):
            a = [1, 2, 3, 4, 5, 6, 7, 8]
            b = [6, 7, 8, 9, 0]

            c = list(set(a) & set(b))


            self.assertEqual(task.task_4(a,b), c, msg="task_4")
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 14 Feb 2023 10:26:54 UTC"
record: -1
