type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 42
    length: 81
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 30
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 171
    length: 24
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 80
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  - offset: 241
    length: 162
    placeholder_text: '# TODO'
    initial_state:
      length: 6
      offset: 130
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO'
  text: |
    # Пример 1
    def task_1(A):
        # TODO
        return


    # Пример 2
    def task_2(A):
        # TODO
        return


    # Пример 3
    def task_3(A):
        # TODO
        return
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest
    import random
    import task
    import math


    # todo: replace this with an actual test
    class TestCase(unittest.TestCase):
        def test_1(self):
            N = 3
            a = []
            for i in range(N):
                a.append(random.randint(-10, 10))
            s = 0
            for i in range(N):
                if a[i] > 0:
                    s += a[i]
            self.assertEqual(task.task_1(a), s, msg="Test1")

        def test_2(self):
            N = 10
            a = []
            for i in range(N):
                a.append(random.randint(1, 10))
            avg = sum(a)/len(a)
            self.assertEqual(task.task_2(a),avg, msg="Task 2 Test 1")

        def test_3(self):
            N = 10
            a = []
            for i in range(N):
                a.append(random.randint(0, 10))
            dispersion = 0
            avg = sum(a) / N
            for i in a:
                dispersion += (i - avg) ** 2
            dispersion = math.sqrt(dispersion / N)
            self.assertEqual(task.task_3(a),dispersion, msg="Task 3 Test 1")
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 28 Feb 2023 15:01:28 UTC"
record: -1
